{"shell":true,"revision":"ac16300db3847083f90195cec0e23ef2c2c2e1ba","objects":[{"type":null,"source":"lib/freegeoip.ex:2","object_type":"ModuleObject","moduledoc":"Simple Elixir wrapper for freegeoip.net HTTP API.\n\nThis package allows to get geolocation information about a specified IP.\n","module":"Elixir.FreeGeoIP","id":"FreeGeoIP"},{"type":null,"source":"lib/freegeoip/search.ex:2","object_type":"ModuleObject","moduledoc":"This module includes the basic search function to get geo information about a specified IP.\n","module":"Elixir.FreeGeoIP.Search","id":"FreeGeoIP.Search"},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"delete","module_id":"FreeGeoIP","id":"delete/3","doc":"Issues a DELETE request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"delete!","module_id":"FreeGeoIP","id":"delete!/3","doc":"Issues a DELETE request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"get","module_id":"FreeGeoIP","id":"get/3","doc":"Issues a GET request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"get!","module_id":"FreeGeoIP","id":"get!/3","doc":"Issues a GET request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"head","module_id":"FreeGeoIP","id":"head/3","doc":"Issues a HEAD request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"head!","module_id":"FreeGeoIP","id":"head!/3","doc":"Issues a HEAD request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:12","signature":[["method",[],null],["endpoint",[],null],["\\\\",[],[["locale",[],null],null]],["\\\\",[],[["body",[],null],[]]]],"object_type":"FunctionObject","name":"make_request","module_id":"FreeGeoIP","id":"make_request/4","doc":"Boilerplate code to make requests to freegeoip server specified whit the data read from config or system environment variables.\n\nArgs:\n\n* method - request method\n* endpoint - string requested API endpoint\n* locale - specify language for getting results. This argument is converted directly into a `Ã€ccept-language` HTTP header on the request.\n\nReturns dict\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"options","module_id":"FreeGeoIP","id":"options/3","doc":"Issues an OPTIONS request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"options!","module_id":"FreeGeoIP","id":"options!/3","doc":"Issues a OPTIONS request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"patch","module_id":"FreeGeoIP","id":"patch/4","doc":"Issues a PATCH request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"patch!","module_id":"FreeGeoIP","id":"patch!/4","doc":"Issues a PATCH request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"post","module_id":"FreeGeoIP","id":"post/4","doc":"Issues a POST request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"post!","module_id":"FreeGeoIP","id":"post!/4","doc":"Issues a POST request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"put","module_id":"FreeGeoIP","id":"put/4","doc":"Issues a PUT request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"put!","module_id":"FreeGeoIP","id":"put!/4","doc":"Issues a PUT request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["method",[],null],["url",[],null],["\\\\",[],[["body",[],null],""]],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"request","module_id":"FreeGeoIP","id":"request/5","doc":"Issues an HTTP request with the given method to the given url.\n\nThis function is usually used indirectly by `get/3`, `post/4`, `put/4`, etc\n\nArgs:\n  * `method` - HTTP method as an atom (`:get`, `:head`, `:post`, `:put`,\n    `:delete`, etc.)\n  * `url` - target url as a binary string or char list\n  * `body` - request body. See more below\n  * `headers` - HTTP headers as an orddict (e.g., `[{\"Accept\", \"application/json\"}]`)\n  * `options` - Keyword list of options\n\nBody:\n  * binary, char list or an iolist\n  * `{:form, [{K, V}, ...]}` - send a form url encoded\n  * `{:file, \"/path/to/file\"}` - send a file\n\nOptions:\n  * `:timeout` - timeout to establish a connection, in milliseconds. Default is 8000\n  * `:recv_timeout` - timeout used when receiving a connection. Default is 5000\n  * `:stream_to` - a PID to stream the response to\n  * `:proxy` - a proxy to be used for the request; it can be a regular url\n    or a `{Host, Proxy}` tuple\n  * `:proxy_auth` - proxy authentication `{User, Password}` tuple\n  * `:ssl` - SSL options supported by the `ssl` erlang module\n  * `:follow_redirect` - a boolean that causes redirects to be followed\n  * `:max_redirect` - an integer denoting the maximum number of redirects to follow\n  * `:params` - an enumerable consisting of two-item tuples that will be appended to the url as query string parameters\n\nTimeouts can be an integer or `:infinity`\n\nThis function returns `{:ok, response}` or `{:ok, async_response}` if the\nrequest is successful, `{:error, reason}` otherwise.\n\n## Examples\n\n    request(:post, \"https://my.website.com\", \"{\\\"foo\\\": 3}\", [{\"Accept\", \"application/json\"}])\n\n","arity":5},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["method",[],null],["url",[],null],["\\\\",[],[["body",[],null],""]],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"request!","module_id":"FreeGeoIP","id":"request!/5","doc":"Issues an HTTP request with the given method to the given url, raising an\nexception in case of failure.\n\n`request!/5` works exactly like `request/5` but it returns just the\nresponse in case of a successful request, raising an exception in case the\nrequest fails.\n","arity":5},{"type":"def","source":"lib/freegeoip.ex:10","signature":[],"object_type":"FunctionObject","name":"start","module_id":"FreeGeoIP","id":"start/0","doc":"Starts HTTPoison and its dependencies.\n","arity":0},{"type":"def","source":"lib/freegeoip.ex:10","signature":[["target",[],null]],"object_type":"FunctionObject","name":"transformer","module_id":"FreeGeoIP","id":"transformer/1","doc":false,"arity":1},{"type":"def","source":"lib/freegeoip/search.ex:8","signature":[["ip",[],null],["\\\\",[],[["locale",[],null],null]]],"object_type":"FunctionObject","name":"search","module_id":"FreeGeoIP.Search","id":"search/2","doc":"Performs a IP search.\n\n```ex\n{:ok, result} = FreeGeoIP.search(ip)\n```\n\n### Arguments\n\n* `ip`: can be either a stinrg or a tuple representing an IPv4 ip format\n* `locale`: (optional) localize the geolocation data. You can use [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) or any string valid for a `Accept-language` HTTP header specification](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)\n\n### Sample result\n\n```ex\n%{\n  \"city\" => \"San Francisco\",\n  \"country_code\" => \"US\",\n  \"country_name\" => \"United States\",\n  \"ip\" => \"192.30.252.128\",\n  \"latitude\" => 37.7697,\n  \"longitude\" => -122.3933,\n  \"metro_code\" => 807,\n  \"region_code\" => \"CA\",\n  \"region_name\" => \"California\",\n  \"time_zone\" => \"America/Los_Angeles\",\n  \"zip_code\" => \"94107\"\n}\n```\n\n### Errors:\n\nThe errors will have the following format:\n\n```ex\n%{:error, %{reason: reason, error: error_message}}\n```\n\n`reason` can be one of the following:\n\n* `:auth_failed`: the server is protected with basic authentication and you have passed wrong credentials (see below for authentication)\n* `:process_timeout`: the server responded, but internally caused a timeout\n* `:timeout`: server did not respond in a few seconds\n* Any other reason given by the [HTTPoison.Error](https://hexdocs.pm/httpoison/HTTPoison.Error.html#content)\n* `:incorrect_ip_range`: incorrect IP provided (like 500.23.1100.32)\n* `:incorrect_ip_format`: specified IP format not supported. Use only string or tuple.\n\n\n","arity":2}],"language":"elixir","git_repo_url":"https://github.com/juljimm/freegeoip-elixir","client_version":"0.5.1","client_name":"inch_ex","branch_name":"master","args":[]}